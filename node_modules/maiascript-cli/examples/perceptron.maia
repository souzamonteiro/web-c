#!/usr/bin/env maiascript

dataX = [0.00,0.25,0.50,0.75,1.00,1.25,1.50,1.75,2.00,2.25,2.50,2.75,3.00,3.25,3.50,3.75,4.00,4.25,4.50,4.75,5.00,5.25,5.50,5.75,6.00,6.25,6.50,6.75,7.00,7.25,7.50,7.75,8.00,8.25,8.50,8.75,9.00,9.25,9.50,9.75,10.00]
dataY = [2.0000,2.2197,2.3811,2.5136,2.7310,2.7827,2.8327,3.0351,2.9551,3.3973,3.5117,3.5909,3.7345,3.8419,4.0952,4.2879,4.4000,4.8764,5.2843,5.9241,6.3302,6.9608,7.3044,7.6791,8.2819,9.0139,9.3387,10.0420,10.4000,10.6437,10.4786,10.4928,10.7082,10.6233,10.8862,10.6830,10.8393,10.9186,10.8814,10.9779,11.0000]

nData = dataX.length

//               w22
//             -> x2
//      w12  -        -  w25
//         -             -
//       -  w13     w35    -
//(i1) x1 ------> x3 ----> x5 ------> (o1)
//       -       w33       - w55
//         -             -
//     w14  -        -  w45
//             -> x4
//               w44

x1 = 0.0
x2 = 0.0
x3 = 0.0
x4 = 0.0
x5 = 0.0

w12 = 2.0 * math.random() - 1.0
w22 = 2.0 * math.random() - 1.0
w13 = 2.0 * math.random() - 1.0
w33 = 2.0 * math.random() - 1.0
w14 = 2.0 * math.random() - 1.0
w44 = 2.0 * math.random() - 1.0
w25 = 2.0 * math.random() - 1.0
w35 = 2.0 * math.random() - 1.0
w45 = 2.0 * math.random() - 1.0
w55 = 2.0 * math.random() - 1.0

system.println("Initial weights:")
system.println("w12 = " + w12)
system.println("w22 = " + w22)
system.println("w13 = " + w13)
system.println("w33 = " + w33)
system.println("w14 = " + w14)
system.println("w44 = " + w44)
system.println("w25 = " + w25)
system.println("w35 = " + w35)
system.println("w45 = " + w45)
system.println("w55 = " + w55 + "\n")

o1 = 0.0

maxEpochs = 2000
lRate = 0.005
maxSquareError = 0.001
squareError = core.matrix(0.0, nData)

epochCounter = 0
maxCount = 1000

// w12 = 1.87421
// w22 = -11.9436
// w13 = 0.240971
// w33 = -0.430983
// w14 = 1.20098
// w44 = -5.80413
// w25 = 1.27462
// w35 = 2.27141
// w45 = 1.55536
// w55 = 5.86445

for (epoch = 1; epoch <= maxEpochs; epoch = epoch + 1) {
    for (n = 0; n < nData; n = n + 1) {
        x = dataX[n]
        y = dataY[n]

        # xj = sum(xij * wij) + bj
        x1 = x

        x2 = x1 * w12 + w22
        x3 = x1 * w13 + w33
        x4 = x1 * w14 + w44

        # yj = f(x) = 2 / (1 + e ^ (-2 * x)) - 1
        #      df(x)/dx = 1 - f(x) ^ 2
        y2 = 2.0 / (1.0 + math.exp(-2.0 * x2)) - 1.0
        y3 = 2.0 / (1.0 + math.exp(-2.0 * x3)) - 1.0
        y4 = 2.0 / (1.0 + math.exp(-2.0 * x4)) - 1.0
        
        # y5 = f(x) = x
        #      df(x)/dx = 1
        x5 = y2 * w25 + y3 * w35 + y4 * w45 + w55
        y5 = x5

        e = y - y5

        squareError[n] = e * e

        d = e

        w25 = w25 + lRate * d * 1.0 * y2
        w35 = w35 + lRate * d * 1.0 * y3
        w45 = w45 + lRate * d * 1.0 * y4
        w55 = w55 + lRate * d * 1.0 * 1.0
        
        d5 = d * w25 + d * w35 + d * w45

        w12 = w12 + lRate * d5 * (1 - (2.0 / (1.0 + math.exp(-2.0 * x2)) - 1.0) ^ 2) * x1
        w22 = w22 + lRate * d5 * (1 - (2.0 / (1.0 + math.exp(-2.0 * x2)) - 1.0) ^ 2) * 1.0
        w13 = w13 + lRate * d5 * (1 - (2.0 / (1.0 + math.exp(-2.0 * x3)) - 1.0) ^ 2) * x1
        w33 = w33 + lRate * d5 * (1 - (2.0 / (1.0 + math.exp(-2.0 * x3)) - 1.0) ^ 2) * 1.0
        w14 = w14 + lRate * d5 * (1 - (2.0 / (1.0 + math.exp(-2.0 * x4)) - 1.0) ^ 2) * x1
        w44 = w44 + lRate * d5 * (1 - (2.0 / (1.0 + math.exp(-2.0 * x4)) - 1.0) ^ 2) * 1.0
    }

    sumSquareError = matrix.sum(squareError) / 2.0
    
    if (sumSquareError < maxSquareError) {
        break
    }

    epochCounter = epochCounter + 1

    if (epochCounter >= maxCount) {
        system.printf("Epoch: %d, RSS: %f", epoch, sumSquareError)
        epochCounter = 0
    }
}

system.println("\nFinal weights:")
system.println("w12 = " + w12)
system.println("w22 = " + w22)
system.println("w13 = " + w13)
system.println("w33 = " + w33)
system.println("w14 = " + w14)
system.println("w44 = " + w44)
system.println("w25 = " + w25)
system.println("w35 = " + w35)
system.println("w45 = " + w45)
system.println("w55 = " + w55 + "\n")

x1 = 0.5
x2 = x1 * w12 + w22
x3 = x1 * w13 + w33
x4 = x1 * w14 + w44

# Activation function.
# Sigmoid: f(x) = 2 / (1 + e^(-2x)) - 1
#          df(x)/dx = 1 - f(x)^2
y2 = 2.0 / (1.0 + math.exp(-2.0 * x2)) - 1.0
y3 = 2.0 / (1.0 + math.exp(-2.0 * x3)) - 1.0
y4 = 2.0 / (1.0 + math.exp(-2.0 * x4)) - 1.0

# Calculate the output of the second layer.
# Linear: f(x) = x
#         df(x)/dx = 1
x5 = y2 * w25 + y3 * w35 + y4 * w45 + w55
y5 = x5

system.printf("f(0.5) = %f", y5)
