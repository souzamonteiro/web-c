setupGPU = async function () {if (core.logicalNot(navigator.gpu)) {system.log("WebGPU is not supported. Enable chrome://flags/#enable-unsafe-webgpu flag.");return;};adapter= await navigator.gpu.requestAdapter();device= await adapter.requestDevice();firstMatrix= new Float32Array([2,2,1,2,3,4]);secondMatrix= new Float32Array([2,2,5,6,7,8]);gpuBufferFirstMatrix=device.createBuffer({"mappedAtCreation": true,"size": firstMatrix.byteLength,"usage": GPUBufferUsage.STORAGE});gpuBufferSecondMatrix=device.createBuffer({"mappedAtCreation": true,"size": secondMatrix.byteLength,"usage": GPUBufferUsage.STORAGE});resultMatrixBufferSize=core.mul(Float32Array.BYTES_PER_ELEMENT,(core.add(2,core.mul(firstMatrix[0],secondMatrix[1]))));resultMatrixBuffer=device.createBuffer({"size": resultMatrixBufferSize,"usage": core.bitwiseOR(GPUBufferUsage.STORAGE,GPUBufferUsage.COPY_SRC)});arrayBufferFirstMatrix=gpuBufferFirstMatrix.getMappedRange();float32ArrayBufferFirstMatrix= new Float32Array(arrayBufferFirstMatrix);float32ArrayBufferFirstMatrix.set(firstMatrix);gpuBufferFirstMatrix.unmap();arrayBufferSecondMatrix=gpuBufferSecondMatrix.getMappedRange();float32ArrayBufferSecondMatrix= new Float32Array(arrayBufferSecondMatrix);float32ArrayBufferSecondMatrix.set(secondMatrix);gpuBufferSecondMatrix.unmap();type=glslang.EShLangCompute;bindGroupLayout=device.createBindGroupLayout({"entries": [{"binding": 0,"visibility": GPUShaderStage.COMPUTE,"type": "readonly-storage-buffer"},{"binding": 1,"visibility": GPUShaderStage.COMPUTE,"type": "readonly-storage-buffer"},{"binding": 2,"visibility": GPUShaderStage.COMPUTE,"type": "storage-buffer"}]});bindGroup=device.createBindGroup({"layout": bindGroupLayout,"entries": [{"binding": 0,"resource": {"buffer": gpuBufferFirstMatrix}},{"binding": 1,"resource": {"buffer": gpuBufferSecondMatrix}},{"binding": 2,"resource": {"buffer": resultMatrixBuffer}}]});source=core.add(core.add(core.add(core.add(core.add(core.add(core.add(core.add(core.add(core.add(core.add(core.add(core.add(core.add(core.add(core.add(core.add(core.add(core.add(core.add(core.add(core.add(core.add(core.add("#version 450\n","layout(std430, set = 0, binding = 0) readonly buffer FirstMatrix {\n"),"    vec2 size;\n"),"    float numbers[];\n"),"} firstMatrix;\n"),"layout(std430, set = 0, binding = 1) readonly buffer SecondMatrix {\n"),"    vec2 size;\n"),"    float numbers[];\n"),"} secondMatrix;\n"),"layout(std430, set = 0, binding = 2) buffer ResultMatrix {\n"),"    vec2 size;\n"),"    float numbers[];\n"),"} resultMatrix;\n"),"void main() {\n"),"    resultMatrix.size = vec2(firstMatrix.size.x, secondMatrix.size.y);\n"),"    ivec2 resultCell = ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y);\n"),"    float result = 0.0;\n"),"    for (int i = 0; i < firstMatrix.size.y; i++) {\n"),"        int a = i + resultCell.x * int(firstMatrix.size.y);\n"),"        int b = resultCell.y + i * int(secondMatrix.size.y);\n"),"        result += firstMatrix.numbers[a] * secondMatrix.numbers[b];\n"),"    }\n"),"    int index = resultCell.y + resultCell.x * int(secondMatrix.size.y);\n"),"    resultMatrix.numbers[index] = result;\n"),"}");glslangModule= await import("https://unpkg.com/@webgpu/glslang@0.0.15/dist/web-devel/glslang.js");glslang= await glslangModule.default();wgslCode=glslang.compileGLSL(source,"compute");system.log(core.add("GLSL code: ",JSON.stringify(source)));system.log(core.add("SPIR-V bytecodes: ",JSON.stringify(wgslCode)));computePipeline=device.createComputePipeline({"layout": device.createPipelineLayout({"bindGroupLayouts": [bindGroupLayout]}),"computeStage": {"module": device.createShaderModule({"code": wgslCode}),"entryPoint": "main"}});commandEncoder=device.createCommandEncoder();passEncoder=commandEncoder.beginComputePass();passEncoder.setPipeline(computePipeline);passEncoder.setBindGroup(0,bindGroup);passEncoder.dispatch(firstMatrix[0],secondMatrix[1]);passEncoder.endPass();gpuReadBuffer=device.createBuffer({"size": resultMatrixBufferSize,"usage": core.bitwiseOR(GPUBufferUsage.COPY_DST,GPUBufferUsage.MAP_READ)});commandEncoder.copyBufferToBuffer(resultMatrixBuffer,0,gpuReadBuffer,0,resultMatrixBufferSize);gpuCommands=commandEncoder.finish();device.defaultQueue.submit([gpuCommands]);bufferRead= await gpuReadBuffer.mapAsync(GPUMapMode.READ);arrayBuffer=gpuReadBuffer.getMappedRange();float32ArrayBuffer= new Float32Array(arrayBuffer);system.log(core.add("Matrices multiplication: ",float32ArrayBuffer));};setupGPU();