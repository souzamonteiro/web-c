#!/usr/bin/env maiascript

tries = 10

if (system.argc == 2) {
    tries = system.argv[1]
}

system.println("Testing the compiler " + tries + " times.")

system.println("Testing operator '!'...")

test (tries; "falsetrue"; 0) {
    a = 1
    b = 0
    c = !a
    d = !b
    e = core.toString(c)
    f = core.toString(d)
    g = e + f
} catch (v) {
    system.print("TEST: Fail testing operator \"!\".")
    system.print("      Expected result " + core.testResult.expected)
    system.print("      But got " + core.testResult.obtained)
}

system.println("Testing operator \"~\"...")

test (tries; -128; 0) {
    a = 127
    b = ~a
} catch (v) {
    system.print("TEST: Fail testing operator \"~\".")
    system.print("      Expected result " + core.testResult.expected)
    system.print("      But got " + core.testResult.obtained)
}

system.println("Testing operator '='...")

test (tries; "12.3MaiaScript1+2*i"; 0) {
    a = 1
    b = 2.3
    c = "MaiaScript"
    d = 1+2*i
    e = core.toString(a) + core.toString(b) + c + core.toString(d)
} catch (v) {
    system.print("TEST: Fail testing operator `=`.")
    system.print("      Expected result " + core.testResult.expected)
    system.print("      But got " + core.testResult.obtained)
}

system.println("Testing operator ':='...")
test (tries; 1; 0) {
    constructor a(b) {
        x = b
    }
    c := a(1)
    d = c.x
} catch (v) {
    system.print("TEST: Fail testing operator `=`.")
    system.print("      Expected result " + core.testResult.expected)
    system.print("      But got " + core.testResult.obtained)
}

test (tries; "3.33.31MaiaScriptMaiaScript2.3[1,2,3][[1,2],[3,4]]"; 0) {
    a = 1
    b = 2.3
    c = "MaiaScript"
    d = 1+2*i
    e = [1,2,3]
    f = [1,2;3,4]
    g = a + b
    h = b + a
    j = core.toString(a) + c
    k = c + core.toString(b)
    l = core.toString(g) + core.toString(h) + j + k + core.toString(e) + core.toString(f)
} catch (v) {
    system.print("TEST: Fail testing operator '+'.")
    system.print("      Expected result " + core.testResult.expected)
    system.print("      But got " + core.testResult.obtained)
}

system.println("Testing operator '-'...")

test (tries; "-2.61MaiaScriptMaiaScript2.3{1,2,3}[1,2;3,4]"; 0) {
    a = 1
    b = 2.3
    c = "MaiaScript"
    d = 1+2*i
    e = [1,2,3]
    f = [1,2;3,4]
    g = a - b
    h = b - a
    j = core.toString(a) + c
    k = c + core.toString(b)
    l = core.toString(g) + core.toString(h) + j + k + core.toString(e) + core.toString(f)
} catch (v) {
    system.print("TEST: Fail testing operator '-'.")
    system.print("      Expected result " + core.testResult.expected)
    system.print("      But got " + core.testResult.obtained)
}

system.println("Testing operator '*'...")

test (tries; "4.61+2*i2.3+4.6*i{1,2,3}[1,2;3,4]MaiaScript"; 0) {
    a = 1
    b = 2.3
    c = "MaiaScript"
    d = 1+2*i
    e = [1,2,3]
    f = [1,2;3,4]
    g = a * b
    h = b * a
    j = a * d
    k = d * b
    l = core.toString(g) + core.toString(h) + core.toString(j) + core.toString(k) + core.toString(e) + core.toString(f) + c
} catch (v) {
    system.print("TEST: Fail testing operator '*'.")
    system.print("      Expected result " + core.testResult.expected)
    system.print("      But got " + core.testResult.obtained)
}

system.println("Testing operator '<<'...")

test (tries; 128; 0) {
    (2 << 3) * (2 << 2)
} catch (v) {
    system.print("TEST: Fail testing operator '<<'.")
    system.print("      Expected result " + core.testResult.expected)
    system.print("      But got " + core.testResult.obtained)
}

system.println("Testing operator '>>'...")

test (tries; 2; 0) {
    (512 >> 3) / (128 >> 2)
} catch (v) {
    system.print("TEST: Fail testing operator '>>'.")
    system.print("      Expected result " + core.testResult.expected)
    system.print("      But got " + core.testResult.obtained)
}

system.println("Testing relational operators '<' and '>'...")

test (tries; "1 0 1 0 1 0 1 0 1 0"; 0) {
    a = 2
    b = 3
    c = "Hello"
    d = "MaiaScript"
    e = [1,2,3]
    f = [4,5,6,7]
    g = [1,2;3,4]
    h = [5,6,7;8,9,10]
    string.sprintf("%d %d %d %d %d %d %d %d %d %d", a < b, a > b, a < c, a > c, c > d, c < d, e < f, e > f, g < h, g > h)
} catch (v) {
    system.print("TEST: Fail testing relational operators '<' and '>'.")
    system.print("      Expected result " + core.testResult.expected)
    system.print("      But got " + core.testResult.obtained)
}
system.println("Testing relational operators '<=' and '>='...")

test (tries; "1 0 1 0 1 0 1 0 1 0"; 0) {
    a = 2
    b = 3
    c = "Hello"
    d = "MaiaScript"
    e = [1,2,3]
    f = [4,5,6,7]
    g = [1,2;3,4]
    h = [5,6,7;8,9,10]
    string.sprintf("%d %d %d %d %d %d %d %d %d %d", a <= b, a >= b, a <= c, a >= c, c >= d, c <= d, e <= f, e >= f, g <= h, g >= h)
} catch (v) {
    system.print("TEST: Fail testing relational operators '<=' and '>='.")
    system.print("      Expected result " + core.testResult.expected)
    system.print("      But got " + core.testResult.obtained)
}

system.println("Testing relational operators '==' and '!='...")

test (tries; "1 0 1 0 1 0 1 0 1 0 1 1 1 1 1 1 1 1"; 0) {
    a = 2
    b = 3
    c = "Hello"
    d = "MaiaScript"
    e = [1,2,3]
    f = [4,5,6,7]
    g = [1,2;3,4]
    h = [5,6,7;8,9,10]
    j = 2
    k = 3
    l = "Hello"
    m = "MaiaScript"
    n = [1,2,3]
    o = [4,5,6,7]
    p = [1,2;3,4]
    q = [5,6,7;8,9,10]
    string.sprintf("%d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d", a != b, a == b, a != c, a == c, c != d, c == d, e != f, e == f, g != h, g == h, a == j, b == k, c == l, d == m, e == n, f == o, g == p, h == q)
} catch (v) {
    system.print("TEST: Fail testing relational operators '==' and '!='.")
    system.print("      Expected result " + core.testResult.expected)
    system.print("      But got " + core.testResult.obtained)
}

system.println("Testing binary operators \"&\", \"|||\" and \"|\"...")

test (tries; "1 6 7"; 0) {
    # a = 101
    # b = 011
    # c = 001
    # d = 110
    # e = 111
    a = 5
    b = 3
    c = a & b
    d = a ||| b
    e = a | b
    string.sprintf("%d %d %d", c, d, e)
} catch (v) {
    system.print("TEST: Fail testing binary operators \"&\", \"|||\" and \"|\".")
    system.print("      Expected result " + core.testResult.expected)
    system.print("      But got " + core.testResult.obtained)
}

system.println("Testing logic operators \"&&\", \"||||\" and \"||\"...")

test (tries; "1 1 true false"; 0) {
    a = 1
    b = 0
    c = 1
    d = a && b || c
    e = a || b && c
    f = a |||| b
    g = a |||| c
    string.sprintf("%d %d %s %s", d, e, f, g)
} catch (v) {
    system.print("TEST: Fail testing logic operators \"&&\", \"||||\" and \"||\".")
    system.print("      Expected result " + core.testResult.expected)
    system.print("      But got " + core.testResult.obtained)
}

system.println("Testing the expression compiler...")
test (tries; 13; 0) {
    x = 2
    y = 2 * x ^ 2 + 2 * x + 1
} catch (v) {
    system.print("TEST: Fail testing the expression compiler.")
    system.print("      Expected result " + core.testResult.expected)
    system.print("      But got " + core.testResult.obtained)
}

system.println("Testing the precedence of operators...")

test (tries; 3; 0) {
    1 + 2
} catch (v) {
    system.print("TEST: Fail testing operator '+'.")
    system.print("      Expected result " + core.testResult.expected)
    system.print("      But got " + core.testResult.obtained)
}

test (tries; 5; 0) {
    2 * (1 + 2) - 1
} catch (v) {
    system.print("TEST: Fail testing operators '+', '-' and '*'.")
    system.print("      Expected result " + core.testResult.expected)
    system.print("      But got " + core.testResult.obtained)
}

test (tries; 22; 0) {
    3*4+5*2
} catch (v) {
    system.print("TEST: Fail testing operators '+' and '*'.")
    system.print("      Expected result " + core.testResult.expected)
    system.print("      But got " + core.testResult.obtained)
}

test (tries; 34; 0) {
    2*(3*(1+5) - 1)
} catch (v) {
    system.print("TEST: Fail testing expressions in parentheses.")
    system.print("      Expected result " + core.testResult.expected)
    system.print("      But got " + core.testResult.obtained)
}

test (tries; 5; 0) {
    45 / (4 + 5)
} catch (v) {
    system.print("TEST: Fail testing expressions in parentheses.")
    system.print("      Expected result " + core.testResult.expected)
    system.print("      But got " + core.testResult.obtained)
}

test (tries; 3; 0) {
    120 % 9
} catch (v) {
    system.print("TEST: Fail testing operator '%'.")
    system.print("      Expected result " + core.testResult.expected)
    system.print("      But got " + core.testResult.obtained)
}

system.println("Testing complex numbers support...")

test (tries; 18-4*i; 0) {
    (7+2*i)+(11-6*i)
} catch (v) {
    system.print("TEST: Fail testing expression \"(7+2*i)+(11-6*i)\".")
    system.print("      Expected result " + core.testResult.expected)
    system.print("      But got " + core.testResult.obtained)
}

test (tries; core.toString(8-9*i); 0) {
    core.toString((8-3*i)-(6*i))
} catch (v) {
    system.print("TEST: Fail testing expression (8-3*i)-(6*i).")
    system.print("      Expected result " + core.testResult.expected)
    system.print("      But got " + core.testResult.obtained)
}

test (tries; 91-132*i; 0) {
    (9+4*i)*(3-16*i)
} catch (v) {
    system.print("TEST: Fail testing expression \"(9+4*i)*(3-16*i)\".")
    system.print("      Expected result " + core.testResult.expected)
    system.print("      But got " + core.testResult.obtained)
}

test (tries; 0.2+0.4*i; 0) {
    (1*i)/(2+1*i)
} catch (v) {
    system.print("TEST: Fail testing expression \"1*i/(2+i)\".")
    system.print("      Expected result " + core.testResult.expected)
    system.print("      But got " + core.testResult.obtained)
}

test (tries; core.toString(-12+16.000000000000007*i); 0) {
    core.toString((2+4*i)^2)
} catch (v) {
    system.print("TEST: Fail testing expression (2+4*i)^2.")
    system.print("      Expected result " + core.testResult.expected)
    system.print("      But got " + core.testResult.obtained)
}

test (tries; core.toString(1.7989074399478673+1.1117859405028423*i); 0) {
    core.toString((2+4*i)^0.5)
} catch (v) {
    system.print("TEST: Fail testing expression (2+4*i)^0.5.")
    system.print("      Expected result " + core.testResult.expected)
    system.print("      But got " + core.testResult.obtained)
}

system.println("Testing matrix support...")

test (tries; 4; 0) {
    a=[1,2;3,4]
    i=0
    j=0
    b=a[i+1,j+1]
} catch (v) {
    system.print("TEST: Fail testing operators inside matrix indexes.")
    system.print("      Expected result " + core.testResult.expected)
    system.print("      But got " + core.testResult.obtained)
}

test (tries; [6,8;10,12]; 0) {
    a = [1,2;3,4]
    b = [5,6;7,8]
    c = a + b
} catch (v) {
    system.print("TEST: Fail testing operator '+'.")
    system.print("      Expected result " + core.testResult.expected)
    system.print("      But got " + core.testResult.obtained)
}

test (tries; [-4,-4;-4,-4]; 0) {
    a = [1,2;3,4]
    b = [5,6;7,8]
    c = a - b
} catch (v) {
    system.print("TEST: Fail testing  operator '-'.")
    system.print("      Expected result " + core.testResult.expected)
    system.print("      But got " + core.testResult.obtained)
}

test (tries; [19,22;43,50]; 0) {
    a = [1,2;3,4]
    b = [5,6;7,8]
    c = a * b
} catch (v) {
    system.print("TEST: Fail testing  operator '*'.")
    system.print("      Expected result " + core.testResult.expected)
    system.print("      But got " + core.testResult.obtained)
}

test (tries; [19,22;43,50]; 0) {
    a = [1,2;3,4]
    b = [5,6;7,8]
    c = [0,0;0,0]
    for (i = 0; i < 2; i = i + 1) {
        for (j = 0; j < 2; j = j + 1) {
            s = 0
            for (k = 0; k < 2; k = k + 1) {
                s = s + a[i,k] * b[k,j]
            }
            c[i,j] = s
        }
    }
    d = c
} catch (v) {
    system.print("TEST: Fail testing matrix element access.")
    system.print("      Expected result " + core.testResult.expected)
    system.print("      But got " + core.testResult.obtained)
}

system.println("Testing the scripted functions support...")

function fact (n) {
    if (n == 0) {
        return(1)
    } else {
        return(n * fact(n - 1))
    }
}

test (tries; 120; 0) {
    fact(5)
} catch (v) {
    system.print("TEST: Fail testing function definition and call.")
    system.print("      Expected result " + core.testResult.expected)
    system.print("      But got " + core.testResult.obtained)
}
