MaiaRecorder = function (options) {opts={"startButton": "","pauseButton": "","stopButton": "","playButton": "","saveButton": "","videoPlayer": "","fileNamePrefix": "Screen-recording","mimeType": "video/webm"};if (core.different(core.type(options),"undefined")) {for (key in options) {var value = options[key];opts[key]=value;};};let startButton;let pauseButton;let stopButton;let playButton;let saveButton;let videoPlayer;let fileNamePrefix;let mimeType;let recorder;let recordingData=[];let recorderStream;let isPlaying=false;startButton=document.getElementById(opts["startButton"]);pauseButton=document.getElementById(opts["pauseButton"]);stopButton=document.getElementById(opts["stopButton"]);playButton=document.getElementById(opts["playButton"]);saveButton=document.getElementById(opts["saveButton"]);videoPlayer=document.getElementById(opts["videoPlayer"]);fileNamePrefix=opts["fileNamePrefix"];mimeType=opts["mimeType"];mixTracks = function (trackA,trackB) {ctx= new AudioContext();dest=ctx.createMediaStreamDestination();audioTracksA=trackA.getAudioTracks();if (core.GT(audioTracksA.length,0)) {mediaStreamSourceA=ctx.createMediaStreamSource(trackA);mediaStreamSourceA.connect(dest);};audioTracksB=trackB.getAudioTracks();if (core.GT(audioTracksB.length,0)) {mediaStreamSourceB=ctx.createMediaStreamSource(trackB);mediaStreamSourceB.connect(dest);};mixedTracks=dest.stream.getTracks();mixedTracks=mixedTracks.concat(trackA.getVideoTracks());mixedTracks=mixedTracks.concat(trackB.getVideoTracks());mediaStream= new MediaStream(mixedTracks);return (mediaStream);};getFilename = function () {now= new Date();timestamp=now.toISOString();fileName=core.add(core.add(fileNamePrefix,"-"),timestamp);return (fileName);};startRecording = async function () {let userMediaStream;let displayMediaStream;recordingData=[];audioOptions={"video": false,"audio": true};videoOptions={"video": {"displaySurface": "browser"},"audio": true};try {userMediaStream= await navigator.mediaDevices.getUserMedia(audioOptions);displayMediaStream= await navigator.mediaDevices.getDisplayMedia(videoOptions);} catch (e) {system.showMessageDialog("Error: screen recording is not supported by this browser.");return;};if (userMediaStream) {recorderStream=mixTracks(userMediaStream,displayMediaStream);} else {recorderStream=displayMediaStream;};recorder= new MediaRecorder(recorderStream,{"mimeType": mimeType});onDataAvailable = function (e) {if (core.logicalAND(e.data,core.GT(e.data.size,0))) {recordingData.push(e.data);};console.log("available");};onStop = function () {stopTrackRecording = function (track) {track.stop();};recorderStreamTracks=recorderStream.getTracks();recorderStreamTracks.forEach(stopTrackRecording);userMediaStreamTracks=userMediaStream.getTracks();userMediaStreamTracks.forEach(stopTrackRecording);displayMediaStreamTracks=displayMediaStream.getTracks();displayMediaStreamTracks.forEach(stopTrackRecording);};recorder.ondataavailable=onDataAvailable;recorder.onstop=onStop;onInactive = function () {stopRecording();console.log(recorder.state);};recorderStream.addEventListener("inactive",onInactive);recorder.start();startButton.innerText="Recording";startButton.disabled=true;pauseButton.disabled=false;stopButton.disabled=false;playButton.disabled=true;saveButton.disabled=true;console.log(recorder.state);};startButton.addEventListener("click",startRecording);stopRecording = function () {if (core.logicalOR((core.equal(recorder.state,"recording")),(core.equal(recorder.state,"paused")))) {recorder.stop();};startButton.disabled=false;pauseButton.disabled=true;stopButton.disabled=true;playButton.disabled=false;saveButton.disabled=false;startButton.innerText="Record";pauseButton.innerText="Pause";console.log(recorder.state);};stopButton.addEventListener("click",stopRecording);pauseRecording = function () {if (core.equal(recorder.state,"paused")) {recorder.resume();pauseButton.innerText="Pause";} else if (core.equal(recorder.state,"recording")) {recorder.pause();pauseButton.innerText="Resume";};console.log(recorder.state);};pauseButton.addEventListener("click",pauseRecording);playRecording = function () {videoPlayer.hidden=core.logicalNot(videoPlayer.hidden);if (core.logicalAND((core.logicalNot(isPlaying)),(core.logicalNot(videoPlayer.hidden)))) {videoSource= new Blob(recordingData,{"type": mimeType});videoPlayer.src=window.URL.createObjectURL(videoSource);videoPlayer.play();playButton.innerText="Hide";} else {playButton.innerText="Play";};};playButton.addEventListener("click",playRecording);setIsPlaying = function () {isPlaying=true;};unsetIsPlaying = function () {isPlaying=false;};videoPlayer.addEventListener("play",setIsPlaying);videoPlayer.addEventListener("pause",unsetIsPlaying);videoPlayer.addEventListener("playing",setIsPlaying);videoPlayer.addEventListener("ended",unsetIsPlaying);saveRecording = function () {blob= new Blob(recordingData,{"type": mimeType});url=window.URL.createObjectURL(blob);a=document.createElement("a");a.style.display="none";a.href=url;a.download=core.add(getFilename(),".webm");document.body.appendChild(a);a.click();removeDownloadLink = function () {document.body.removeChild(a);window.URL.revokeObjectURL(url);};setTimeout(removeDownloadLink,500);};saveButton.addEventListener("click",saveRecording);};