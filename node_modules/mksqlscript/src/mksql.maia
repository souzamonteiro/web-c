#!/usr/bin/env maiascript

///
/// @license
/// Copyright 2020 Roberto Luiz Souza Monteiro,
///                Renata Souza Barreto,
///                Hernane Borges de Barros Pereira.
///
/// Licensed under the Apache License, Version 2.0 (the "License")
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///
///   http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, eitherMath.express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///

///
/// Class for creating scripts for inserting data into SQL databases from CSV files.
/// @namespace mkSql
///
namespace mkSql {
    appTitle = "MkSQL"
    appName = "mksql"

    ///
    /// Creates a script for inserting data into an SQL database from an array.
    /// @method createSQLInsertScript
    /// @memberof mkSql
    /// @param {object}   tableData - An array containing the table data.
    /// @param {string}   tableName - Name of the table that will be populated in the database.
    /// @param {string}   columnsNames - Column names that will be populated in the SQL database table.
    /// @param {object}   columnsNumbers - Number of vector columns that will be used to populate the SQL database table.
    /// @param {number}   keyColumn - Column number that will be used to decide whether or not to insert data into the database table.
    /// @param {number}   keyColumnLength - Minimum size of the key column that will be used to decide whether or not to insert data into the database table.
    /// @param {number}   exactLength - The key column must be the exact size specified.
    /// @param {object}   columnsFormaters - Formatters to format columns before inserting them into the database table.
    /// @param {object}   trimColumns - Removes left and right spaces in strings.
    /// @param {object}   dateColumns - Numbers of columns with date data in dd/mm/yyyy.
    /// @param {number}   idSeed - Seed for tuple ids.
    /// @return {string}  Returns a script for inserting data into an SQL database.
    ///
    function createSQLInsertScript(tableData, tableName, columnsNames, columnsNumbers, keyColumn, keyColumnLength, exactLength, columnsFormaters, trimColumns, dateColumns, idSeed) {
        // Create SQL INSERT commands.
        outputContents = ""

        n = idSeed

        for (j = 0; j < tableData.length; j = j + 1) {
            try {
                if (showDebugInfo) {
                    system.log(JSON.stringify(tableData[j]))
                }
                if (tableData[j] != "") {
                    parseRecord = false
                    if (exactLength) {
                        if (core.length(tableData[j, keyColumn]) == keyColumnLength) {
                            parseRecord = true
                        }
                    } else {
                        if (core.length(tableData[j, keyColumn]) >= keyColumnLength) {
                            parseRecord = true
                        }
                    }
                    if (parseRecord) {
                        columnsData = core.toString(n) + ", "
                        for  (k = 0; k < columnsNumbers.length; k = k + 1) {
                            if (core.type(columnsFormaters[k]) != "undefined") {
                                numberFormater = columnsFormaters[k]
                                numberFormaterClass = numberFormater["constructor"]
                                if (numberFormaterClass.name == "StringMask") {
                                    if (dateColumns.includes(k) && core.length(tableData[j, columnsNumbers[k]]) > 0) {
                                        columnsData = columnsData + "str_to_date('" + numberFormater.apply(tableData[j, columnsNumbers[k]]) + "', '%d-%m-%Y')"
                                    } else {
                                        if (core.length(tableData[j, columnsNumbers[k]]) == 0) {
                                            columnsData = columnsData + "null"
                                        } else {
                                            columnsData = columnsData + "'" + numberFormater.apply(tableData[j, columnsNumbers[k]]) + "'"
                                        }
                                    }
                                } else {
                                    if (dateColumns.includes(k) && core.length(tableData[j, columnsNumbers[k]]) > 0) {
                                        columnsData = columnsData + "str_to_date('" + numberFormater(tableData[j, columnsNumbers[k]]) + "', '%d-%m-%Y')"
                                    } else {
                                        if (core.length(tableData[j, columnsNumbers[k]]) == 0) {
                                            columnsData = columnsData + "null"
                                        } else {
                                            if (core.length(numberFormater(tableData[j, columnsNumbers[k]])) > 0) {
                                                columnsData = columnsData + "'" + numberFormater(tableData[j, columnsNumbers[k]]) + "'"
                                            } else {
                                                columnsData = columnsData + "null"
                                            }

                                        }
                                    }
                                }
                            } else {
                                if (trimColumns) {
                                    if (dateColumns.includes(k) && core.length(tableData[j, columnsNumbers[k]]) > 0) {
                                        columnsData = columnsData + "str_to_date('" + core.trim(tableData[j, columnsNumbers[k]]) + "', '%d-%m-%Y')"
                                    } else {
                                        if (core.length(tableData[j, columnsNumbers[k]]) == 0) {
                                            columnsData = columnsData + "null"
                                        } else {
                                            columnsData = columnsData + "'" + core.trim(tableData[j, columnsNumbers[k]]) + "'"
                                        }
                                    } 
                                } else {
                                    if (dateColumns.includes(k) && core.length(tableData[j, columnsNumbers[k]]) > 0) {
                                        columnsData = columnsData + "str_to_date('" + tableData[j, columnsNumbers[k]] + "', '%d-%m-%Y')"
                                    } else {
                                        if (core.length(tableData[j, columnsNumbers[k]]) == 0) {
                                            columnsData = columnsData + "null"
                                        } else {
                                            columnsData = columnsData + "'" + tableData[j, columnsNumbers[k]] + "'"
                                        }
                                    }
                                }
                            }
                            if (k < columnsNumbers.length - 1) {
                                columnsData = columnsData + ", "
                            }     
                        }
                        outputContents = outputContents + "insert into " + tableName + " (" + columnsNames + ") values (" + columnsData + ");\n"

                        n = n + 1
                    }
                }
            } catch (e) {
                system.log("Error parsing record: " + JSON.stringify(tableData[j]))
                system.log("Error message: " + e)
            }
        }

        return(outputContents)
    }

    ///
    /// Removes non-digit characters from an string.
    /// @method onlyDigits
    /// @memberof mkSql
    /// @param {string}   str - String to remove non-digit characters.
    /// @return {string}  Returns a script with all non-digit characters removed.
    ///
    function onlyDigits(str) {
        r =  core.regExp("[^\\d]", "g")

        return(str.replace(r, ""))
    }

    // Interpret the options passed on the command line,
    // process the files and generate the requested reports.
    function run() {
        // Supports only the Node.js interpreter.
        if (core.type(process) != "undefined") {
            command = "node"
            
            fs = system.require("fs")
            readTextFile = fs.readFileSync
            
            // Read file callback.
            function readFile(input) {
                content = readTextFile(input, "utf-8")
                return(content)
            }
            
            // Command line options.
            inputFile = ""
            outputFile = ""
            showDebugInfo = false
            separators = ","
            allowRepeatChar = false
            linesToSkip = 0
            doEval = false
            tableName = ""
            columnsNames = ""
            columnsNumbers = []
            columnsMasks = []
            trimColumns = false
            dateColumns = []
            columnsFormaters = []
            idSeed = 1
            keyColumn = 0
            keyColumnLength = 0
            exactLength = false

            // Get command line arguments.
            if (system.argc > 1) {
                i = 1
                while (i < system.argc) {
                    if ((system.argv[i] == "-h") || (system.argv[i] == "--help")) {
                        system.log(mkSql.appTitle + " Command Line Interface (CLI)")
                        system.log("Usage: " + mkSql.appName + " [options] [input file] [--] [arguments]")
                        system.log("Options:")
                        system.log("-h     --help               Displays this help message.")
                        system.log("-o     [output file]        Output file name.")
                        system.log("-d                          Show debug information.")
                        system.log("-s                          Columns separators.")
                        system.log("       --repeat             The separator character can be repeated (for formatting).")
                        system.log("       --skip               Number of lines to skip.")
                        system.log("       --eval               Run core.eval before adding the column to the record.")
                        system.log("       --masks              Applies a mask to numeric data in specified columns.")
                        system.log("       --trim               Removes left and right spaces in strings.")
                        system.log("       --dates              Numbers of columns with date data in dd/mm/yyyy.")
                        system.log("       --seed               Starting number for tuple ids.")
                        system.log("-t                          Table name.")
                        system.log("-c                          Columns names.")
                        system.log("-n                          Columns numbers.")
                        system.log("-k                          Key column number.")
                        system.log("-m                          Minumum key column length to include.")
                        system.log("-e                          The key column must be the exact size specified.")
                        process.exit(0)
                    } elseif (system.argv[i] == "-o") {
                        i = i + 1
                        outputFile = system.argv[i]
                    } elseif (system.argv[i] == "-d") {
                        showDebugInfo = true
                    } elseif (system.argv[i] == "-s") {
                        i = i + 1
                        separators = system.argv[i]
                    } elseif (system.argv[i] == "--repeat") {
                        allowRepeatChar = true
                    } elseif (system.argv[i] == "--skip") {
                        i = i + 1
                        linesToSkip = core.eval(system.argv[i])
                    } elseif (system.argv[i] == "--eval") {
                        doEval = true
                    } elseif (system.argv[i] == "--masks") {
                        i = i + 1
                        columnsMasks = core.splitCSV(system.argv[i], ", ", true, true)
                    } elseif (system.argv[i] == "--trim") {
                        trimColumns = true
                    } elseif (system.argv[i] == "--dates") {
                        i = i + 1
                        dateColumns = core.splitCSV(system.argv[i], ", ", true, true)
                    } elseif (system.argv[i] == "--seed") {
                        i = i + 1
                        idSeed = core.eval(system.argv[i])
                    } elseif (system.argv[i] == "-t") {
                        i = i + 1
                        tableName = system.argv[i]
                    } elseif (system.argv[i] == "-c") {
                        i = i + 1
                        columnsNames = system.argv[i]
                    } elseif (system.argv[i] == "-n") {
                        i = i + 1
                        columnsNumbers = core.splitCSV(system.argv[i], ", ", true, true)
                    } elseif (system.argv[i] == "-k") {
                        i = i + 1
                        keyColumn = core.eval(system.argv[i])
                    } elseif (system.argv[i] == "-m") {
                        i = i + 1
                        keyColumnLength = core.eval(system.argv[i])
                    } elseif (system.argv[i] == "-e") {
                        exactLength = true
                    } else {
                        inputFile = system.argv[i]
                        break
                    }
                    i = i + 1
                }

                if (inputFile != "") {
                    local Glob = system.require("glob")
                    // Process each file based on glob pattern.
                    function processFiles(er, files) {
                        if (files.length == 0) {
                            system.log(mkSql.appTitle + " Command Line Interface (CLI)")
                            system.log("Usage: " + mkSql.appName + " [options] [input file] [--] [arguments]")
                        } else {
                            for (i = 0; i < files.length; i = i + 1) {
                                // Get the full file name.
                                file = files[i]
                                
                                // Get the file without extension.
                                fileName = file.split(".")
                                fileName = fileName.shift()

                                // Get the file name extension.
                                fileExtension = file.split(".")
                                fileExtension = fileExtension.pop()

                                // Read the file contents.
                                //fileContents = readFile(String(file))
                                fileContents = system.loadCSV(file, linesToSkip, separators, allowRepeatChar, doEval)

                                //system.println(system.createCSV(fileContents, ";", ["code", "product_description", "price", "puchase_date", "puchase_time"]))
                                if (columnsMasks.length > 0) {
                                    local StringMask = system.require("string-mask")
                                    for (j = 0; j < columnsMasks.length; j = j + 1) {
                                        if (core.length(columnsMasks[j]) > 0) {
                                            if (columnsMasks[j] == "D") {
                                                columnsFormaters[j] = mkSql.onlyDigits
                                            } else {
                                                columnsFormaters[j] := StringMask(columnsMasks[j])
                                            }
                                        }
                                    }
                                }

                                // Create SQL INSERT commands.
                                outputContents = mkSql.createSQLInsertScript(fileContents, tableName, columnsNames, columnsNumbers, keyColumn, keyColumnLength, exactLength, columnsFormaters, trimColumns, dateColumns, idSeed)

                                // Sets the output file.
                                if (outputFile == "") {
                                    outputFile = fileName + ".out"
                                }

                                // Write something to the output file.
                                function errorCallback(err) {
                                    if (err) {
                                        throw(err)
                                    }
                                }
                                fs.writeFile(outputFile, outputContents, errorCallback)
                            }
                        }
                    }

                    options = []

                    // Get all file names based on glob pattern.
                    local glob := Glob(inputFile, options, processFiles)
                } else {
                    system.log(mkSql.appTitle + " Command Line Interface (CLI)")
                    system.log("Usage: " + mkSql.appName + " [options] [input file] [--] [arguments]")
                }
            } else {
                system.log("Do something...")
            }
        }
    }
}

// Run the MaiaApp code if this script has been invoked
// from the command line.
if (core.type(process) != "undefined") {
    mkSql.run()
}