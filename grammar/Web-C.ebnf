Program                  ::= Expression*
                           | EOF

Expression               ::= Comment
                           | Block
                           | Operation
                           | Statement
                           | PreprocessorDirective
                           | 'void'

Block                    ::= '{' Expression* '}'

Operation                ::= VariableAssignment
VariableAssignment       ::= ConditionalExpression (('=' | '*=' | '/=' | '%=' | '+=' | '-=' | '<<=' | '>>=' | '&=' | '^=' | '|=') ConditionalExpression)*
ConditionalExpression    ::= LogicalORExpression ('?' VariableAssignment ':' VariableAssignment)?
LogicalORExpression      ::= LogicalANDExpression ('||' LogicalANDExpression)*
LogicalANDExpression     ::= BitwiseORExpression ('&&' BitwiseORExpression)*
BitwiseORExpression      ::= BitwiseXORExpression ('|' BitwiseXORExpression)*
BitwiseXORExpression     ::= BitwiseANDExpression ('^' BitwiseANDExpression)*
BitwiseANDExpression     ::= EqualityExpression ('&' EqualityExpression)*
EqualityExpression       ::= RelationalExpression (('==' | '!=') RelationalExpression)*
RelationalExpression     ::= ShiftExpression (('<' | '>' | '<=' | '>=') ShiftExpression)*
ShiftExpression          ::= AdditiveExpression (('<<' | '>>') AdditiveExpression)*
AdditiveExpression       ::= MultiplicativeExpression (('+' | '-') MultiplicativeExpression)*
MultiplicativeExpression ::= PowerExpression (('*' | '/' | '%') PowerExpression)*
PowerExpression          ::= UnaryExpression ('^' UnaryExpression)*
UnaryExpression          ::= 'sizeof' Primary
                           | '~' Primary
                           | '!' Primary
                           | '++' Primary
                           | '--' Primary
                           | Primary '++'
                           | Primary '--'
                           | Primary
                           
Primary                  ::= Member
                           | Value
                           | ParenthesizedExpression

Statement                ::= Do
                           | While
                           | For
                           | Break
                           | Continue
                           | If
                           | Switch
                           | Enum
                           | Typedef
                           | Struct
                           | Union
                           | FunctionDeclaration
                           | VariableDeclaration
                           | Return
                           | EmptyStatement
                           
Do                       ::= 'do' Expression 'while' '(' Expression ')'
While                    ::= 'while' '(' Expression ')' Expression
For                      ::= 'for' '(' Expression ';' Expression ';' Expression ')' Expression
Break                    ::= 'break'
Continue                 ::= 'continue'
If                       ::= 'if' '(' Expression ')' Expression Else?
Else                     ::= 'else' Expression
Switch                   ::= 'switch' '(' Expression ')' '{' Case+ Default? '}'
Case                     ::= 'case' Expression ':' Expression*
Default                  ::= 'default' ':' Expression*
Enum                     ::= 'enum' Array
Typedef                  ::= 'typedef' Expression Identifier
Struct                   ::= 'struct' Expression
Union                    ::= 'union' '{' Expression* '}'
FunctionDeclaration      ::= Type Identifier '(' Arguments ')' Block
VariableDeclaration      ::= Qualifier* Type ('*')* Expression
Return                   ::= 'return' Expression
EmptyStatement           ::= ';'

Qualifier                ::= 'auto'
                           | 'const'
                           | 'extern'
                           | 'long'
                           | 'short'
                           | 'signed'
                           | 'static'
                           | 'unsigned'
                           | 'volatile'
                           
Type                     ::= 'char'
                           | 'double'
                           | 'float'
                           | 'int'
                           | 'long'
                           | 'short'
                           | 'void'
                           
Arguments                ::= Expression (',' Expression)*

Member                   ::= Identifier (('.' | '->') Identifier)* '(' Arguments? ')'
                           | Identifier (('.' | '->') Identifier)* ('[' Arguments? ']')*

Array                    ::= '{' Element (',' Element)* '}'
Matrix                   ::= '[' Row? (';' Row)* ']'

Element                  ::= (Key ':')? Expression
Key                      ::= Identifier
                           | String

Row                      ::= Column (',' Column)*
Column                   ::= Expression

ParenthesizedExpression  ::= '(' Expression ')'

Value                    ::= Array
                           | Character
                           | False
                           | Matrix
                           | Null
                           | Real
                           | String
                           | True

PreprocessorDirective    ::= DefineDirective
                           | UndefDirective
                           | IfDirectiveStatement
                           | IncludeDirective
                           
DefineDirective          ::= '#define' Identifier Expression
                           | '#define' Identifier '(' Arguments? ')' Expression
UndefDirective           ::= '#undef' Identifier
IfDirectiveStatement     ::= (IfDirective | IfdefDirective | IfndefDirective) ElifDirective* ElseDirective? EndifDirective
IfDirective              ::= '#if' Expression*
IfdefDirective           ::= '#ifdef' Identifier Expression*
IfndefDirective          ::= '#ifndef' Identifier Expression*
ElifDirective            ::= '#elif' Expression Expression*
ElseDirective            ::= '#else' Expression*
EndifDirective           ::= '#endif'
IncludeDirective         ::= '#include' String
                           | '#include' '<' Expression '>'
                           
WhiteSpace               ::= WhiteSpace^token
                          /* ws: definition */

<?TOKENS?>

EOF                      ::= $

Identifier               ::= (FirstIdentifierChar (IdentifierChar)*) - ReservedWord

ReservedWord             ::= 'auto'
                           | 'break'
                           | 'case'
                           | 'char'
                           | 'const'
                           | 'continue'
                           | 'default'
                           | 'do'
                           | 'double'
                           | 'else'
                           | 'enum'
                           | 'extern'
                           | 'false'
                           | 'float'
                           | 'for'
                           | 'if'
                           | 'int'
                           | 'long'
                           | 'null'
                           | 'return'
                           | 'short'
                           | 'signed'
                           | 'sizeof'
                           | 'static'
                           | 'struct'
                           | 'switch'
                           | 'true'
                           | 'typedef'
                           | 'union'
                           | 'unsigned'
                           | 'void'
                           | 'volatile'
                           | 'while'

Null                     ::= 'null'
True                     ::= 'true'
False                    ::= 'false'

FirstIdentifierChar      ::= '_' | [A-Za-z]
IdentifierChar           ::= '_' | [0-9] | [A-Za-z]

Character                ::= "'" SingleCharacter "'"
                           | "'" EscapeSequence "'"
SingleCharacter          ::= InputCharacter - ( "'" | '\' )

String                   ::= '"' StringCharacters? '"'
StringCharacters         ::= StringCharacter+
StringCharacter          ::= InputCharacter - ( '"' | '\' )
                           | EscapeSequence
EscapeSequence           ::= BackSlash 'b'
                           | BackSlash 't'
                           | BackSlash 'n'
                           | BackSlash 'f'
                           | BackSlash 'r'
                           | BackSlash '"'
                           | BackSlash "'"
                           | BackSlash BackSlash
                           | OctalEscape
                           | HexEscapeSequence
OctalEscape              ::= '\' OctalDigit
                           | '\' OctalDigit OctalDigit
                           | '\' ZeroToThree OctalDigit OctalDigit
HexEscapeSequence        ::= '\x' HexDigit HexDigit
OctalDigit               ::= '0'
                           | '1'
                           | '2'
                           | '3'
                           | '4'
                           | '5'
                           | '6'
                           | '7'
ZeroToThree              ::= '0'
                           | '1'
                           | '2'
                           | '3'
HexDigit                 ::= [0-9a-fA-F]
BackSlash                ::= '\' ( UnicodeMarker '005' [cC] )?
InputCharacter           ::= UnicodeInputCharacter - ( CR | LF )

UnicodeInputCharacter    ::= UnicodeEscape
                           | RawInputCharacter
UnicodeEscape            ::= '\' UnicodeMarker HexDigit HexDigit HexDigit HexDigit
UnicodeMarker            ::= 'u'+
RawInputCharacter        ::= [#x0001-#xD7FF]
                           | [#xE000-#xFFFD]
                           | [#x10000-#x10FFFF]

Real                     ::= '-'? Digit+ ('.' Digit+)? (('e' | 'E') ('+' | '-')? Digit+)?
Digit                    ::= [0-9]

Comment                  ::= SingleLineComment

SingleLineComment        ::= '//' (SourceCharacter - LineTerminator)*

SourceCharacter          ::= .

LineTerminator           ::= LF
                           | CR
                           | CR LF
LF                       ::= #x000A
CR                       ::= #x000D

WhiteSpace               ::= [#x0009#x000A#x000D#x0020]+
